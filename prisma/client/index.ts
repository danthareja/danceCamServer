// Code generated by Prisma CLI (https://github.com/prisma/prisma) and prisma-client-lib@0.2.58. DO NOT EDIT.

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  session: (where?: SessionWhereInput) => Promise<boolean>;
  segment: (where?: SegmentWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  session: (where: SessionWhereUniqueInput) => Session;
  sessions: (
    args?: {
      where?: SessionWhereInput;
      orderBy?: SessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<SessionNode>>;
  sessionsConnection: (
    args?: {
      where?: SessionWhereInput;
      orderBy?: SessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SessionConnection;
  segment: (where: SegmentWhereUniqueInput) => Segment;
  segments: (
    args?: {
      where?: SegmentWhereInput;
      orderBy?: SegmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<SegmentNode>>;
  segmentsConnection: (
    args?: {
      where?: SegmentWhereInput;
      orderBy?: SegmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SegmentConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSession: (data: SessionCreateInput) => Session;
  updateSession: (
    args: { data: SessionUpdateInput; where: SessionWhereUniqueInput }
  ) => Session;
  updateManySessions: (
    args: { data: SessionUpdateInput; where?: SessionWhereInput }
  ) => BatchPayload;
  upsertSession: (
    args: {
      where: SessionWhereUniqueInput;
      create: SessionCreateInput;
      update: SessionUpdateInput;
    }
  ) => Session;
  deleteSession: (where: SessionWhereUniqueInput) => Session;
  deleteManySessions: (where?: SessionWhereInput) => BatchPayload;
  createSegment: (data: SegmentCreateInput) => Segment;
  updateSegment: (
    args: { data: SegmentUpdateInput; where: SegmentWhereUniqueInput }
  ) => Segment;
  updateManySegments: (
    args: { data: SegmentUpdateInput; where?: SegmentWhereInput }
  ) => BatchPayload;
  upsertSegment: (
    args: {
      where: SegmentWhereUniqueInput;
      create: SegmentCreateInput;
      update: SegmentUpdateInput;
    }
  ) => Segment;
  deleteSegment: (where: SegmentWhereUniqueInput) => Segment;
  deleteManySegments: (where?: SegmentWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  session: (
    where?: SessionSubscriptionWhereInput
  ) => SessionSubscriptionPayloadSubscription;
  segment: (
    where?: SegmentSubscriptionWhereInput
  ) => SegmentSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SegmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "videoId_ASC"
  | "videoId_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SegmentCreateManyWithoutSessionInput {
  create?:
    | SegmentCreateWithoutSessionInput[]
    | SegmentCreateWithoutSessionInput;
  connect?: SegmentWhereUniqueInput[] | SegmentWhereUniqueInput;
}

export type SessionWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
}>;

export type SegmentWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
}>;

export interface SessionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  segments_every?: SegmentWhereInput;
  segments_some?: SegmentWhereInput;
  segments_none?: SegmentWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SessionWhereInput[] | SessionWhereInput;
  OR?: SessionWhereInput[] | SessionWhereInput;
  NOT?: SessionWhereInput[] | SessionWhereInput;
}

export interface SegmentCreateInput {
  name: String;
  videoId: String;
  startTime: Int;
  endTime: Int;
  session: SessionCreateOneWithoutSegmentsInput;
}

export interface SegmentUpdateManyWithoutSessionInput {
  create?:
    | SegmentCreateWithoutSessionInput[]
    | SegmentCreateWithoutSessionInput;
  delete?: SegmentWhereUniqueInput[] | SegmentWhereUniqueInput;
  connect?: SegmentWhereUniqueInput[] | SegmentWhereUniqueInput;
  disconnect?: SegmentWhereUniqueInput[] | SegmentWhereUniqueInput;
  update?:
    | SegmentUpdateWithWhereUniqueWithoutSessionInput[]
    | SegmentUpdateWithWhereUniqueWithoutSessionInput;
  upsert?:
    | SegmentUpsertWithWhereUniqueWithoutSessionInput[]
    | SegmentUpsertWithWhereUniqueWithoutSessionInput;
}

export interface SegmentUpsertWithWhereUniqueWithoutSessionInput {
  where: SegmentWhereUniqueInput;
  update: SegmentUpdateWithoutSessionDataInput;
  create: SegmentCreateWithoutSessionInput;
}

export interface SegmentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  videoId?: String;
  videoId_not?: String;
  videoId_in?: String[] | String;
  videoId_not_in?: String[] | String;
  videoId_lt?: String;
  videoId_lte?: String;
  videoId_gt?: String;
  videoId_gte?: String;
  videoId_contains?: String;
  videoId_not_contains?: String;
  videoId_starts_with?: String;
  videoId_not_starts_with?: String;
  videoId_ends_with?: String;
  videoId_not_ends_with?: String;
  startTime?: Int;
  startTime_not?: Int;
  startTime_in?: Int[] | Int;
  startTime_not_in?: Int[] | Int;
  startTime_lt?: Int;
  startTime_lte?: Int;
  startTime_gt?: Int;
  startTime_gte?: Int;
  endTime?: Int;
  endTime_not?: Int;
  endTime_in?: Int[] | Int;
  endTime_not_in?: Int[] | Int;
  endTime_lt?: Int;
  endTime_lte?: Int;
  endTime_gt?: Int;
  endTime_gte?: Int;
  session?: SessionWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SegmentWhereInput[] | SegmentWhereInput;
  OR?: SegmentWhereInput[] | SegmentWhereInput;
  NOT?: SegmentWhereInput[] | SegmentWhereInput;
}

export interface SegmentUpdateWithoutSessionDataInput {
  name?: String;
  videoId?: String;
  startTime?: Int;
  endTime?: Int;
}

export interface SessionUpsertWithoutSegmentsInput {
  update: SessionUpdateWithoutSegmentsDataInput;
  create: SessionCreateWithoutSegmentsInput;
}

export interface SessionUpdateOneWithoutSegmentsInput {
  create?: SessionCreateWithoutSegmentsInput;
  update?: SessionUpdateWithoutSegmentsDataInput;
  upsert?: SessionUpsertWithoutSegmentsInput;
  delete?: Boolean;
  connect?: SessionWhereUniqueInput;
}

export interface SessionCreateWithoutSegmentsInput {
  name?: String;
  description?: String;
}

export interface SessionUpdateInput {
  name?: String;
  description?: String;
  segments?: SegmentUpdateManyWithoutSessionInput;
}

export interface SegmentCreateWithoutSessionInput {
  name: String;
  videoId: String;
  startTime: Int;
  endTime: Int;
}

export interface SegmentUpdateWithWhereUniqueWithoutSessionInput {
  where: SegmentWhereUniqueInput;
  data: SegmentUpdateWithoutSessionDataInput;
}

export interface SessionCreateInput {
  name?: String;
  description?: String;
  segments?: SegmentCreateManyWithoutSessionInput;
}

export interface SessionCreateOneWithoutSegmentsInput {
  create?: SessionCreateWithoutSegmentsInput;
  connect?: SessionWhereUniqueInput;
}

export interface SegmentUpdateInput {
  name?: String;
  videoId?: String;
  startTime?: Int;
  endTime?: Int;
  session?: SessionUpdateOneWithoutSegmentsInput;
}

export interface SessionUpdateWithoutSegmentsDataInput {
  name?: String;
  description?: String;
}

export interface SessionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SessionWhereInput;
  AND?: SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput;
  OR?: SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput;
  NOT?: SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput;
}

export interface SegmentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SegmentWhereInput;
  AND?: SegmentSubscriptionWhereInput[] | SegmentSubscriptionWhereInput;
  OR?: SegmentSubscriptionWhereInput[] | SegmentSubscriptionWhereInput;
  NOT?: SegmentSubscriptionWhereInput[] | SegmentSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SegmentPreviousValuesNode {
  id: ID_Output;
  name: String;
  videoId: String;
  startTime: Int;
  endTime: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SegmentPreviousValues
  extends Promise<SegmentPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  videoId: () => Promise<String>;
  startTime: () => Promise<Int>;
  endTime: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SegmentPreviousValuesSubscription
  extends Promise<AsyncIterator<SegmentPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  videoId: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SessionEdgeNode {
  cursor: String;
}

export interface SessionEdge extends Promise<SessionEdgeNode>, Fragmentable {
  node: <T = Session>() => T;
  cursor: () => Promise<String>;
}

export interface SessionEdgeSubscription
  extends Promise<AsyncIterator<SessionEdgeNode>>,
    Fragmentable {
  node: <T = SessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SessionNode {
  id: ID_Output;
  name: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Session extends Promise<SessionNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  segments: <T = Promise<Array<SegmentNode>>>(
    args?: {
      where?: SegmentWhereInput;
      orderBy?: SegmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SessionSubscription
  extends Promise<AsyncIterator<SessionNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  segments: <T = Promise<AsyncIterator<Array<SegmentSubscription>>>>(
    args?: {
      where?: SegmentWhereInput;
      orderBy?: SegmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SessionPreviousValuesNode {
  id: ID_Output;
  name: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SessionPreviousValues
  extends Promise<SessionPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SessionPreviousValuesSubscription
  extends Promise<AsyncIterator<SessionPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SegmentNode {
  id: ID_Output;
  name: String;
  videoId: String;
  startTime: Int;
  endTime: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Segment extends Promise<SegmentNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  videoId: () => Promise<String>;
  startTime: () => Promise<Int>;
  endTime: () => Promise<Int>;
  session: <T = Session>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SegmentSubscription
  extends Promise<AsyncIterator<SegmentNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  videoId: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<Int>>;
  session: <T = SessionSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SessionSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SessionSubscriptionPayload
  extends Promise<SessionSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Session>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SessionPreviousValues>() => T;
}

export interface SessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SessionSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SessionPreviousValuesSubscription>() => T;
}

export interface SessionConnectionNode {}

export interface SessionConnection
  extends Promise<SessionConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<SessionEdgeNode>>>() => T;
  aggregate: <T = AggregateSession>() => T;
}

export interface SessionConnectionSubscription
  extends Promise<AsyncIterator<SessionConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<SessionEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateSessionSubscription>() => T;
}

export interface AggregateSegmentNode {
  count: Int;
}

export interface AggregateSegment
  extends Promise<AggregateSegmentNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSegmentSubscription
  extends Promise<AsyncIterator<AggregateSegmentNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SegmentSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SegmentSubscriptionPayload
  extends Promise<SegmentSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Segment>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SegmentPreviousValues>() => T;
}

export interface SegmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SegmentSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SegmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SegmentPreviousValuesSubscription>() => T;
}

export interface SegmentEdgeNode {
  cursor: String;
}

export interface SegmentEdge extends Promise<SegmentEdgeNode>, Fragmentable {
  node: <T = Segment>() => T;
  cursor: () => Promise<String>;
}

export interface SegmentEdgeSubscription
  extends Promise<AsyncIterator<SegmentEdgeNode>>,
    Fragmentable {
  node: <T = SegmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSessionNode {
  count: Int;
}

export interface AggregateSession
  extends Promise<AggregateSessionNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSessionSubscription
  extends Promise<AsyncIterator<AggregateSessionNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SegmentConnectionNode {}

export interface SegmentConnection
  extends Promise<SegmentConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<SegmentEdgeNode>>>() => T;
  aggregate: <T = AggregateSegment>() => T;
}

export interface SegmentConnectionSubscription
  extends Promise<AsyncIterator<SegmentConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<SegmentEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateSegmentSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
